# Generated by Django 4.2 on 2025-04-08 17:05

from django.db import migrations, models


def rebuild_slot_column(apps, schema_editor):
    """
    Completely rebuild the slot column using a more direct SQL approach.
    This bypasses Django's migration system for the critical parts.
    """
    # Get connection and cursor
    connection = schema_editor.connection
    vendor = connection.vendor
    
    with connection.cursor() as cursor:
        # Part 1: Check if slot column exists and what unique constraints exist
        slot_exists = False
        try:
            # Try to select from the column to check if it exists
            cursor.execute("SELECT slot FROM core_machineitemprice LIMIT 1")
            slot_exists = True
            print("Slot column exists")
        except Exception as e:
            print(f"Slot column does not exist: {e}")
            slot_exists = False
        
        # Part 2: Handle PostgreSQL database
        if 'postgresql' in vendor:
            print("Using PostgreSQL approach")
            try:
                # Begin transaction
                cursor.execute("BEGIN;")
                
                # Drop any existing unique constraints or indexes on (machine_id, slot)
                cursor.execute("""
                DO $$
                BEGIN
                    -- Drop constraints if they exist
                    IF EXISTS (
                        SELECT 1 FROM pg_constraint 
                        WHERE conname = 'core_machineitemprice_machine_id_slot_92f64367_uniq'
                    ) THEN
                        ALTER TABLE core_machineitemprice 
                        DROP CONSTRAINT core_machineitemprice_machine_id_slot_92f64367_uniq;
                    END IF;
                    
                    -- Drop indexes if they exist
                    IF EXISTS (
                        SELECT 1 FROM pg_indexes 
                        WHERE indexname = 'core_machineitemprice_machine_id_slot_92f64367_uniq'
                    ) THEN
                        DROP INDEX core_machineitemprice_machine_id_slot_92f64367_uniq;
                    END IF;
                    
                    -- Drop any other slot related indexes
                    IF EXISTS (
                        SELECT 1 FROM pg_indexes 
                        WHERE indexname = 'core_machin_machine_f65473_idx'
                    ) THEN
                        DROP INDEX core_machin_machine_f65473_idx;
                    END IF;
                END
                $$;
                """)
                
                # Add temp_slot column if it doesn't exist
                if slot_exists:
                    # Slot column exists, so we'll add a temp_slot and copy data
                    cursor.execute("""
                    DO $$
                    BEGIN
                        IF NOT EXISTS (
                            SELECT 1 FROM information_schema.columns 
                            WHERE table_name = 'core_machineitemprice' AND column_name = 'temp_slot'
                        ) THEN
                            ALTER TABLE core_machineitemprice ADD COLUMN temp_slot integer DEFAULT 1;
                            UPDATE core_machineitemprice SET temp_slot = slot;
                        END IF;
                    END
                    $$;
                    """)
                    
                    # Drop existing slot column and rename temp_slot to slot
                    cursor.execute("ALTER TABLE core_machineitemprice DROP COLUMN slot;")
                    cursor.execute("ALTER TABLE core_machineitemprice RENAME COLUMN temp_slot TO slot;")
                else:
                    # Slot column doesn't exist, so we just add it
                    cursor.execute("ALTER TABLE core_machineitemprice ADD COLUMN slot integer DEFAULT 1;")
                
                # Assign unique slots to each product within a machine
                cursor.execute("""
                WITH ranked_products AS (
                    SELECT 
                        id,
                        machine_id,
                        ROW_NUMBER() OVER(PARTITION BY machine_id ORDER BY id) as new_slot
                    FROM core_machineitemprice
                )
                UPDATE core_machineitemprice
                SET slot = ranked_products.new_slot
                FROM ranked_products
                WHERE core_machineitemprice.id = ranked_products.id;
                """)
                
                # Create index on machine_id, slot (not unique)
                cursor.execute("""
                CREATE INDEX core_machin_machine_slot_idx 
                ON core_machineitemprice(machine_id, slot);
                """)
                
                # Commit transaction
                cursor.execute("COMMIT;")
                print("PostgreSQL slot rebuild completed successfully")
                
            except Exception as e:
                # Rollback transaction on error
                cursor.execute("ROLLBACK;")
                print(f"Error in PostgreSQL slot rebuild: {e}")
                raise e
                
        # Part 3: Handle SQLite database
        elif 'sqlite' in vendor:
            print("Using SQLite approach")
            try:
                # Begin transaction
                cursor.execute("BEGIN TRANSACTION;")
                
                if slot_exists:
                    # Create a new table with the desired schema
                    cursor.execute("""
                    CREATE TABLE new_core_machineitemprice (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        price DECIMAL NOT NULL,
                        current_stock INTEGER NULL,
                        created_at DATETIME NOT NULL,
                        updated_at DATETIME NOT NULL,
                        machine_id INTEGER NOT NULL REFERENCES core_machine(id),
                        product_id INTEGER NOT NULL REFERENCES core_product(id),
                        slot INTEGER DEFAULT 1,
                        FOREIGN KEY (machine_id) REFERENCES core_machine (id),
                        FOREIGN KEY (product_id) REFERENCES core_product (id),
                        UNIQUE (machine_id, product_id)
                    );
                    """)
                    
                    # Copy data from old table to new table
                    cursor.execute("""
                    INSERT INTO new_core_machineitemprice (
                        id, price, current_stock, created_at, updated_at, 
                        machine_id, product_id, slot
                    )
                    SELECT 
                        id, price, current_stock, created_at, updated_at, 
                        machine_id, product_id, slot
                    FROM core_machineitemprice;
                    """)
                    
                    # Drop old table and rename new table
                    cursor.execute("DROP TABLE core_machineitemprice;")
                    cursor.execute("ALTER TABLE new_core_machineitemprice RENAME TO core_machineitemprice;")
                    
                else:
                    # Add slot column if it doesn't exist
                    cursor.execute("ALTER TABLE core_machineitemprice ADD COLUMN slot INTEGER DEFAULT 1;")
                
                # Assign unique slots within each machine
                # SQLite doesn't support window functions, so we do it row by row
                cursor.execute("SELECT DISTINCT machine_id FROM core_machineitemprice;")
                machine_ids = [row[0] for row in cursor.fetchall()]
                
                for machine_id in machine_ids:
                    cursor.execute(
                        "SELECT id FROM core_machineitemprice WHERE machine_id = ? ORDER BY id;", 
                        [machine_id]
                    )
                    rows = cursor.fetchall()
                    
                    for i, (row_id,) in enumerate(rows, start=1):
                        cursor.execute(
                            "UPDATE core_machineitemprice SET slot = ? WHERE id = ?;",
                            [i, row_id]
                        )
                
                # Create needed indexes
                cursor.execute("""
                CREATE INDEX core_machineitemprice_machine_slot 
                ON core_machineitemprice(machine_id, slot);
                """)
                
                cursor.execute("""
                CREATE INDEX core_machineitemprice_product_id 
                ON core_machineitemprice(product_id);
                """)
                
                # Commit transaction
                cursor.execute("COMMIT;")
                print("SQLite slot rebuild completed successfully")
                
            except Exception as e:
                # Rollback transaction on error
                cursor.execute("ROLLBACK;")
                print(f"Error in SQLite slot rebuild: {e}")
                raise e
        
        # Part 4: Other database types (just a fallback)
        else:
            print(f"Unsupported database vendor: {vendor}")
            # Just try to add the column and hope for the best
            try:
                cursor.execute("ALTER TABLE core_machineitemprice ADD COLUMN slot INTEGER DEFAULT 1;")
                print("Added slot column")
            except Exception as e:
                print(f"Error adding slot column: {e}")


def reverse_migration(apps, schema_editor):
    """This migration cannot be reversed safely"""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0013_remove_slot_uniqueness'),
    ]

    operations = [
        # Drop the unique_together constraint completely
        migrations.AlterUniqueTogether(
            name='machineitemprice',
            unique_together={('machine', 'product')},
        ),
        
        # Run the custom SQL function to rebuild the slot column
        migrations.RunPython(rebuild_slot_column, reverse_migration),
    ]
