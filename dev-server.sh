#!/bin/bash

# Colors for terminal output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${BLUE}=== Tropical Vending Development Server ===${NC}"
echo -e "${YELLOW}This script helps you run the application locally.${NC}"
echo ""

# Check if Python is installed
if ! command -v python3 &> /dev/null; then
    echo -e "${YELLOW}Python 3 is not installed. Please install Python 3.9+ to continue.${NC}"
    exit 1
fi

# Check if Node.js is installed
if ! command -v node &> /dev/null; then
    echo -e "${YELLOW}Node.js is not installed. Please install Node.js 16+ to continue.${NC}"
    exit 1
fi

# Check if npm is installed
if ! command -v npm &> /dev/null; then
    echo -e "${YELLOW}npm is not installed. Please install npm to continue.${NC}"
    exit 1
fi

# Function to setup and activate virtual environment
setup_venv() {
    echo -e "${BLUE}Setting up Python virtual environment...${NC}"
    
    # Create virtual environment if it doesn't exist
    if [ ! -d "venv" ]; then
        python3 -m venv venv
        echo -e "${GREEN}Virtual environment created${NC}"
    fi
    
    # Activate virtual environment
    source venv/bin/activate
    
    # Install dependencies
    echo -e "${BLUE}Installing Python dependencies...${NC}"
    pip install -r requirements.txt
    
    echo -e "${GREEN}Python setup complete!${NC}"
}

# Function to fix migration issues
fix_migrations() {
    echo -e "${BLUE}Checking for problematic migrations...${NC}"
    
    # First fix: 0013_remove_slot_uniqueness.py
    MIGRATION_PATH_1="backend/core/migrations/0013_remove_slot_uniqueness.py"
    
    if [ -f "$MIGRATION_PATH_1" ]; then
        echo -e "${YELLOW}Found potentially problematic migration: $MIGRATION_PATH_1${NC}"
        
        # Find the previous migration file
        echo -e "${BLUE}Finding the correct previous migration...${NC}"
        
        # Get all migration files and sort them
        MIGRATION_DIR="backend/core/migrations"
        MIGRATIONS=$(find "$MIGRATION_DIR" -name "00*.py" | sort)
        
        PREVIOUS_MIGRATION=""
        for migration in $MIGRATIONS; do
            base_name=$(basename "$migration")
            if [[ "$base_name" == "0013_remove_slot_uniqueness.py" ]]; then
                break
            fi
            PREVIOUS_MIGRATION="$base_name"
        done
        
        # Remove .py extension for the dependency name
        PREVIOUS_MIGRATION="${PREVIOUS_MIGRATION%.py}"
        
        if [ -z "$PREVIOUS_MIGRATION" ]; then
            echo -e "${RED}Could not find previous migration. Using initial as dependency.${NC}"
            PREVIOUS_MIGRATION="__first__"
        else
            echo -e "${GREEN}Found previous migration: $PREVIOUS_MIGRATION${NC}"
        fi
        
        # Create a backup
        cp "$MIGRATION_PATH_1" "${MIGRATION_PATH_1}.bak"
        
        echo -e "${BLUE}Creating a fixed migration file for 0013...${NC}"
        
        # Replace PostgreSQL-specific DO syntax with SQLite-compatible migration
        cat > "$MIGRATION_PATH_1" << EOL
# Generated by Django 4.2 on 2025-05-17 23:06
from django.db import migrations

class Migration(migrations.Migration):
    dependencies = [
        ('core', '${PREVIOUS_MIGRATION}'),
    ]

    operations = [
        migrations.SeparateDatabaseAndState(
            database_operations=[],  # No actual DB operations for SQLite
            state_operations=[],     # No state changes needed
        ),
    ]
EOL
        echo -e "${GREEN}Fixed migration file created for 0013!${NC}"
    else
        echo -e "${GREEN}No problematic migration 0013 found, continuing...${NC}"
    fi
    
    # Second fix: 0014_complete_slot_rebuild.py
    MIGRATION_PATH_2="backend/core/migrations/0014_complete_slot_rebuild.py"
    
    if [ -f "$MIGRATION_PATH_2" ]; then
        echo -e "${YELLOW}Found another problematic migration: $MIGRATION_PATH_2${NC}"
        
        # Create a backup
        cp "$MIGRATION_PATH_2" "${MIGRATION_PATH_2}.bak"
        
        echo -e "${BLUE}Creating a fixed migration file for 0014...${NC}"
        
        # Replace transaction-based slot rebuild with a simplified migration
        cat > "$MIGRATION_PATH_2" << EOL
# Generated by Django 4.2
from django.db import migrations

class Migration(migrations.Migration):
    dependencies = [
        ('core', '0013_remove_slot_uniqueness'),
    ]

    operations = [
        migrations.SeparateDatabaseAndState(
            database_operations=[],  # Skip actual operations for local development
            state_operations=[],     # No state changes needed
        ),
    ]
EOL
        echo -e "${GREEN}Fixed migration file created for 0014!${NC}"
    else
        echo -e "${GREEN}No problematic migration 0014 found, continuing...${NC}"
    fi
    
    # Special case: if no migrations directory, create it
    if [ ! -d "backend/core/migrations" ]; then
        echo -e "${YELLOW}No migrations directory found. Creating one...${NC}"
        mkdir -p "backend/core/migrations"
        touch "backend/core/migrations/__init__.py"
        echo -e "${GREEN}Migrations directory created!${NC}"
    fi
}

# Function to reset database if needed
reset_database() {
    echo -e "${YELLOW}WARNING: This will delete your current database and start fresh.${NC}"
    read -p "Are you sure you want to continue? (y/n): " confirm
    
    if [[ $confirm =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}Removing database file...${NC}"
        rm -f backend/db.sqlite3
        
        # Also remove all migration files except __init__.py
        echo -e "${BLUE}Removing old migrations...${NC}"
        find backend/core/migrations -type f -not -name "__init__.py" -delete
        
        echo -e "${BLUE}Creating fresh migrations...${NC}"
        cd backend
        python manage.py makemigrations core
        
        echo -e "${GREEN}Database reset complete!${NC}"
        cd ..
        return 0
    else
        echo -e "${BLUE}Database reset cancelled.${NC}"
        return 1
    fi
}

# Function to setup Django database
setup_django() {
    echo -e "${BLUE}Setting up Django database...${NC}"
    cd backend
    
    # Make migrations and apply them
    echo -e "${BLUE}Creating migrations...${NC}"
    python manage.py makemigrations
    
    echo -e "${BLUE}Applying migrations...${NC}"
    python manage.py migrate
    
    # Check if there was an error during migration
    if [ $? -ne 0 ]; then
        echo -e "${RED}Error during migration. You might need to reset the database.${NC}"
        cd ..
        read -p "Would you like to reset the database and create fresh migrations? (y/n): " reset_confirm
        if [[ $reset_confirm =~ ^[Yy]$ ]]; then
            reset_database
            if [ $? -eq 0 ]; then
                # Try migration again if reset was successful
                cd backend
                echo -e "${BLUE}Applying fresh migrations...${NC}"
                python manage.py migrate
                cd ..
            fi
        else
            cd ..
            echo -e "${YELLOW}Migration errors not resolved. You may need to fix them manually.${NC}"
        fi
        return
    fi
    
    # Check if superuser exists
    echo -e "${BLUE}Checking for superuser...${NC}"
    SUPERUSER_COUNT=$(python manage.py shell -c "from django.contrib.auth import get_user_model; print(get_user_model().objects.filter(is_superuser=True).count())")
    
    if [ "$SUPERUSER_COUNT" -eq "0" ]; then
        echo -e "${YELLOW}No superuser found. Creating default superuser...${NC}"
        python manage.py shell -c "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_superuser('admin', 'admin@example.com', 'admin')"
        echo -e "${GREEN}Default superuser created with username 'admin' and password 'admin'${NC}"
        echo -e "${YELLOW}Please change these credentials in production!${NC}"
    else
        echo -e "${GREEN}Superuser already exists.${NC}"
    fi
    
    cd ..
}

# Function to run Django backend
run_backend() {
    echo -e "${BLUE}Starting Django backend server...${NC}"
    cd backend
    python manage.py runserver
}

# Function to setup and run frontend in development mode
run_frontend_dev() {
    echo -e "${BLUE}Starting Vue.js frontend development server...${NC}"
    cd frontend
    npm install
    npm run dev
}

# Function to build frontend for production and collect static files
build_frontend() {
    echo -e "${BLUE}Building Vue.js frontend...${NC}"
    cd frontend
    npm install
    npm run build
    
    echo -e "${BLUE}Collecting static files...${NC}"
    cd ../backend
    python manage.py collectstatic --noinput
    
    echo -e "${GREEN}Frontend build complete!${NC}"
}

# Show options
show_options() {
    echo "Choose an option:"
    echo "1) Run backend only (Django)"
    echo "2) Run frontend only (Vue development server with hot reload)"
    echo "3) Build frontend and run backend (Production-like setup)"
    echo "4) Run both frontend and backend (in separate terminals with tmux)"
    echo "5) Fix migrations and setup database only"
    echo "6) Reset database completely (will delete all data)"
    echo "q) Quit"
    echo ""
}

# Main script logic
setup_venv

# Fix migrations if needed
fix_migrations

# Check if tmux is installed (for option 4)
HAS_TMUX=false
if command -v tmux &> /dev/null; then
    HAS_TMUX=true
fi

# If script is called with an argument, execute that option directly
if [ -n "$1" ]; then
    choice="$1"
else
    # Otherwise, show the options menu
    show_options
    read -p "Enter your choice: " choice
fi

case $choice in
    1)
        setup_django
        run_backend
        ;;
    2)
        run_frontend_dev
        ;;
    3)
        setup_django
        build_frontend
        run_backend
        ;;
    4)
        if [ "$HAS_TMUX" = true ]; then
            echo -e "${BLUE}Starting both servers using tmux...${NC}"
            # Setup Django first before starting servers
            setup_django
            tmux new-session -d -s frontend "cd $(pwd) && ./dev-server.sh 2"
            tmux new-session -d -s backend "cd $(pwd) && ./dev-server.sh 1"
            echo -e "${GREEN}Servers started in tmux sessions.${NC}"
            echo -e "Use ${YELLOW}tmux attach -t frontend${NC} or ${YELLOW}tmux attach -t backend${NC} to view server output."
            echo -e "Press Ctrl+B then D to detach from a tmux session."
        else
            echo -e "${YELLOW}tmux is not installed. Please install tmux or run the servers in separate terminals manually.${NC}"
            echo -e "Terminal 1: ${YELLOW}./dev-server.sh 1${NC}"
            echo -e "Terminal 2: ${YELLOW}./dev-server.sh 2${NC}"
        fi
        ;;
    5)
        setup_django
        echo -e "${GREEN}Database setup complete!${NC}"
        ;;
    6)
        reset_database
        ;;
    q)
        echo -e "${GREEN}Exiting.${NC}"
        exit 0
        ;;
    *)
        echo -e "${YELLOW}Invalid option. Please try again.${NC}"
        ;;
esac 